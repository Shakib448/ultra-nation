{"version":3,"sources":["Components/Country/Country.js","Components/AddedCountry/AddCountry.js","App.js","serviceWorker.js","index.js"],"names":["Country","props","country","name","flag","languages","region","population","currencies","hadleAddContry","className","src","alt","onClick","AddCountry","addCountry","total","reduce","length","App","useState","countries","setCountries","setAddCountry","useEffect","a","fetch","res","json","data","console","log","loadData","newSelectCountry","map","key","alpha3Code","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0QAqCeA,G,YAjCC,SAACC,GAAW,IAAD,EAC2CA,EAAMC,QAAhEC,EADe,EACfA,KAAMC,EADS,EACTA,KAAMC,EADG,EACHA,UAAWC,EADR,EACQA,OAAQC,EADhB,EACgBA,WAAYC,EAD5B,EAC4BA,WAE7CC,EAAiBR,EAAMQ,eAE7B,OACI,6BACI,yBAAKC,UAAU,qBAGX,yCAAeP,GACf,6BAEA,yBAAMQ,IAAKP,EAAMQ,IAAI,KACrB,6BAEA,wCAAcN,EAAd,KAEA,4CAAkBC,EAAlB,KAEA,2CAAiBC,EAAW,GAAGL,KAA/B,KAEA,2CAAiBE,EAAU,GAAGF,MAE9B,6BACA,4BAAQO,UAAU,aAAaG,QAAS,kBAAMJ,EAAeR,EAAMC,WAAnE,WACA,iCCRDY,EApBI,SAACb,GAChB,IAAMc,EAAad,EAAMc,WAGnBC,EAAQD,EAAWE,QAAO,SAACD,EAAOd,GAAR,OAAoBc,EAAQd,EAAQK,aAAY,GAQhF,OACI,6BACI,0DAAgCQ,EAAWG,QAC3C,iDAAuBF,EAAvB,OCkCGG,MA9Cf,WAAgB,IAAD,EAEqBC,mBAAS,IAF9B,mBAENC,EAFM,KAEKC,EAFL,OAIuBF,mBAAS,IAJhC,mBAINL,EAJM,KAIMQ,EAJN,KAMbC,qBAAU,YAQM,uCAAG,8BAAAC,EAAA,+EAEKC,MAAM,wCAFX,cAEPC,EAFO,gBAGMA,EAAIC,OAHV,OAGPC,EAHO,OAIbP,EAAaO,GAJA,kDAObC,QAAQC,IAAR,MAPa,0DAAH,qDAWdC,KAEA,IAEF,IAAMvB,EAAiB,SAACP,GACtB,IAAM+B,EAAgB,sBAAOlB,GAAP,CAAmBb,IACzCqB,EAAcU,IAGhB,OACI,yBAAKvB,UAAU,OACT,+CAAqBW,EAAUH,OAA/B,KACF,kBAAC,EAAD,CAAYH,WAAYA,IAGxBM,EAAUa,KAAI,SAAChC,GAAD,OAAa,kBAAC,EAAD,CAASA,QAASA,EAASiC,IAAKjC,EAAQkC,WAAY3B,eAAgBA,SCjCrF4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a","file":"static/js/main.06b1db2a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Country.css'\r\n\r\n\r\nconst Country = (props) => {\r\n    const { name, flag, languages, region, population, currencies } = props.country;\r\n\r\n    const hadleAddContry = props.hadleAddContry\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"country-container\">\r\n                \r\n\r\n                <h3>Country : {name}</h3>\r\n                <br/>\r\n                \r\n                <img  src={flag} alt=\"\"/>\r\n                <br/>\r\n\r\n                <h4>Region : {region} </h4>\r\n\r\n                <h3>Population : {population} </h3>\r\n\r\n                <h3>Currencies: {currencies[0].name} </h3>\r\n\r\n                <h4>Languages : {languages[0].name}</h4>\r\n\r\n                <br/>\r\n                <button className=\"coutry-btn\" onClick={() => hadleAddContry(props.country)} >Country</button> \r\n                <hr/>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Country;\r\n","import React from 'react'\r\n\r\nconst AddCountry = (props) => {\r\n    const addCountry = props.addCountry;\r\n\r\n\r\n    const total = addCountry.reduce((total, country) => total + country.population, 0 )\r\n\r\n    // let totalPopultation = 0;\r\n    // for (let i = 0; i < addCountry.length; i++) {\r\n    //     const country = addCountry[i];\r\n    //     totalPopultation = totalPopultation + country.population;\r\n    // }\r\n    \r\n    return (\r\n        <div>\r\n            <h1>This is new country added: {addCountry.length}</h1>\r\n            <p>Total Popultaion : {total} </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddCountry;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Country from './Components/Country/Country';\nimport AddCountry from './Components/AddedCountry/AddCountry';\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n\n  const [addCountry, setAddCountry] = useState([]);\n\n  useEffect(() => {\n    // fetch('https://restcountries.eu/rest/v2/all')\n    // .then(res => res.json())\n    // .then(data => {\n    //   setCountries(data);\n    //   const name = data.map((country) => country.name).slice(0,10);\n    //   console.log(name);\n    // })\n    const loadData = async () => {\n      try {\n        const res = await fetch('https://restcountries.eu/rest/v2/all');\n        const data = await res.json();\n        setCountries(data);\n\n      } catch (error) {\n        console.log(error)\n      }\n    }\n\n    loadData();\n\n  },[])\n\n  const hadleAddContry = (country) => {\n    const newSelectCountry = [...addCountry, country];\n    setAddCountry(newSelectCountry);\n  } // always pass peratmer\n\n  return (\n      <div className=\"App\">\n            <h1>Total country : {countries.length} </h1>\n          <AddCountry addCountry={addCountry}></AddCountry>\n\n        {\n          countries.map((country) => <Country country={country} key={country.alpha3Code} hadleAddContry={hadleAddContry}></Country>)\n        }\n      </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}